bwg_main <- bw_main[,1:4]
for (i in 1:(count_aov-1)) {
bwg_main[,i+4] <- bw_main[,i+5] - bw_main[i+4]
colnames(bwg_main)[i+4] = colnames(bw_main)[i+5]
}
# Adding a column of sums
bwg_main$SUM <- 0
for (i in 1:nrow(bwg_main)){
bwg_main$SUM[i] <- sum(bwg_main[i,-(1:4)])
}
# Obtaining descriptive statistics of main animals
bwg_main_desc <- describeBy(bwg_main, bwg_main$DOSE_LEVEL)
bwg_main_desc_output = list()
for (i in 1:group_no) {
bwg_main_desc_i <- bwg_main_desc[[i]][5:(4 + bw_days),3:4]
bwg_main_desc_output[[i]] = bwg_main_desc_i
}
bwg_main_desc_output
# Obtaining dates
bwg_dates <- rownames(bwg_main_desc_output[[1]])
# Renaming the component names of bw_main_desc_output
names(bwg_main_desc_output) = group_names
# Transforming the bw_main_desc_output into a neat table
# Using unicode '/U00b1' to describe the plus minus sign
for (i in 1:length(bwg_main_desc_output)) {
bwg_main_desc_output[[i]]$avg = paste(as.character(round(bwg_main_desc_output[[i]]$mean)),
as.character(round(bwg_main_desc_output[[i]]$sd)), sep=' Â± ') }
output_temp1 <- lapply(bwg_main_desc_output, function(x) {x[,3]})
output_temp2 <- lapply(output_temp1, function(x) {t(x)})
bwg_main_desc_output <- ldply(output_temp2)
colnames(bwg_main_desc_output) <- c('DOSE', bwg_dates)
print(bwg_main_desc_output)
# Conducting Levene's Test between different dose groups
bwg_main_aov <- bwg_main_desc_output
bwg_main_aov[group_no+1,1] = c('LEVENE')
bwg_main_aov[group_no+2,1] = c('ANOVA (p=)')
bwg_main_aov[group_no+3,1] = c('KRUSKAL-WALLIS (p=)')
bwg_main_aov[group_no+4,1] = c('- SUMMARY -')
count_aov_bwg = ncol(bwg_main_aov) - 1
bwg_main_aov <- data.frame(lapply(bwg_main_aov, as.character), stringsAsFactors = FALSE)
# I'm not sure about what happened here. bw_main_aov was unintentionally
# changed into a dataframe with factor-type elements.
# Therefore, I had to manually change them back into characters.
# There are more complicated issues here.
# Below zero numbers have to be considered here, as they cannot be applied
# to sqrt and log functions.
# REF http://www.basic.northwestern.edu/statguidefiles/oneway_anova_alts.html
for (i in 1:count_aov_bwg) {
bwg_day_levene <- leveneTest(bwg_main[,4+i] ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
if (bwg_day_levene[1,3] > 0.05) {
bwg_main_aov[group_no+1,i+1] = c('PASS')
bwg_day_aov <- aov(bwg_main[,4+i] ~ as.character(DOSE_LEVEL), data = bwg_main)
bwg_main_aov[group_no+2,i+1] = round(summary(bwg_day_aov)[[1]][1,5], digits = 4)
bwg_main_aov[group_no+3,i+1] = c('-')
}
else {
bwg_day_levene_log <- leveneTest(log(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
bwg_day_levene_sqrt <- leveneTest(sqrt(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
bwg_day_levene_recip <- leveneTest(1/(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
if (!all(bwg_main[,4+i]>0)) {
# Adding na.rm to avoid null data
increment = -min(bwg_main[,4+i], na.rm = TRUE) + 1
bwg_main_incre <- bwg_main[,4+i] + increment
bwg_day_levene_log_incre <- leveneTest(log(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
bwg_day_levene_sqrt_incre <- leveneTest(sqrt(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
if (bwg_day_levene_log_incre[1,3] > 0.05) {
bwg_day_aov <- aov(log(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL))
bwg_main_aov[group_no+2,i+1] = round(summary(bwg_day_aov)[[1]][1,5], digits = 4)
bwg_main_aov[group_no+3,i+1] = c('-')
bwg_main_aov[group_no+1,i+1] = c('~')
}
else if (bwg_day_levene_sqrt_incre[1,3] > 0.05) {
bwg_day_aov <- aov(sqrt(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL))
bwg_main_aov[group_no+2,i+1] = round(summary(bwg_day_aov)[[1]][1,5], digits = 4)
bwg_main_aov[group_no+3,i+1] = c('-')
bwg_main_aov[group_no+1,i+1] = c('~')
}
else {bwg_main_aov[group_no+1,i+1] = c('FAIL')
bwg_main_aov[group_no+2,i+1] = c('-')
bwg_day_kruskal <- kruskal.test(bwg_main[,4+i] ~ bwg_main$DOSE_LEVEL)
bwg_main_aov[group_no+3,i+1] = round(bwg_day_kruskal$p.value, digits = 4)
}
}
else if (all(bwg_main[,4+i]>0) & bwg_day_levene_log[1,3] > 0.05) {
bwg_day_aov <- aov(log(bwg_main[,4+i]) ~ as.character(DOSE_LEVEL), data = bwg_main)
bwg_main_aov[group_no+2,i+1] = round(summary(bwg_day_aov)[[1]][1,5], digits = 4)
bwg_main_aov[group_no+3,i+1] = c('-')
bwg_main_aov[group_no+1,i+1] = c('~')
}
else if (all(bwg_main[,4+i]>0) & bwg_day_levene_sqrt[1,3] > 0.05) {
bwg_day_aov <- aov(sqrt(bwg_main[,4+i]) ~ as.character(DOSE_LEVEL), data = bwg_main)
bwg_main_aov[group_no+2,i+1] = round(summary(bwg_day_aov)[[1]][1,5], digits = 4)
bwg_main_aov[group_no+3,i+1] = c('-')
bwg_main_aov[group_no+1,i+1] = c('~')
}
else if (bwg_day_levene_recip[1,3] > 0.05) {
bwg_day_aov <- aov(1/(bwg_main[,4+i]) ~ as.character(DOSE_LEVEL), data = bwg_main)
bwg_main_aov[group_no+2,i+1] = round(summary(bwg_day_aov)[[1]][1,5], digits = 4)
bwg_main_aov[group_no+3,i+1] = c('-')
bwg_main_aov[group_no+1,i+1] = c('~')
}
else { bwg_main_aov[group_no+1,i+1] = c('FAIL')
bwg_main_aov[group_no+2,i+1] = c('-')
bwg_day_kruskal <- kruskal.test(bwg_main[,4+i] ~ bwg_main$DOSE_LEVEL)
bwg_main_aov[group_no+3,i+1] = round(bwg_day_kruskal$p.value, digits = 4)
}}
}
# Remember not to input non integer number here.
# Otherwise you could have spent hours debugging a strange bug.
# Sanity check
bwg_main_aov
# Create a summary row
for (i in 1:count_aov_bwg) {
if (bwg_main_aov[group_no+2,i+1] == "-") {
if (as.numeric(bwg_main_aov[group_no+3,i+1]) - 0.001 < 0) {
bwg_main_aov[group_no+4, i+1] = '***'
}
else if (as.numeric(bwg_main_aov[group_no+3,i+1]) - 0.01 < 0) {
bwg_main_aov[group_no+4, i+1] = '**'
}
else if (as.numeric(bwg_main_aov[group_no+3,i+1]) - 0.05 < 0) {
bwg_main_aov[group_no+4, i+1] = '*'
}
else {
bwg_main_aov[group_no+4, i+1] = '---'
}
}
else if (as.numeric(bwg_main_aov[group_no+2,i+1]) - 0.001 < 0) {
bwg_main_aov[group_no+4, i+1] = '***'
}
else if (as.numeric(bwg_main_aov[group_no+2,i+1]) - 0.01 < 0) {
bwg_main_aov[group_no+4, i+1] = '**'
}
else if (as.numeric(bwg_main_aov[group_no+2,i+1]) - 0.05 < 0) {
bwg_main_aov[group_no+4, i+1] = '*'
}
else {
bwg_main_aov[group_no+4, i+1] = '---'
}
}
# Sanity check
bwg_main_aov
# Post-hoc statistical analysis for ANOVA (including non-significant results)
bwg_main_posthoc <- bwg_main_aov
bwg_main_posthoc[1,2:ncol(bwg_main_posthoc)] = "---"
for (i in 1:count_aov_bwg) {
if (bwg_main_posthoc[group_no+2, i+1] >= 0 & bwg_main_posthoc[group_no+1, i+1] == 'PASS') {
bwg_main_Tukey <- TukeyHSD(aov(bwg_main[,4+i] ~ as.character(bwg_main$DOSE_LEVEL)))
bwg_main_posthoc[2:group_no,i+1] = bwg_main_Tukey[[1]][1:(group_no-1),4]
}
else if (bwg_main_posthoc[group_no+2, i+1] >= 0 & bwg_main_posthoc[group_no+1, i+1] == '~') {
bwg_day_levene_log <- leveneTest(log(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
bwg_day_levene_sqrt <- leveneTest(sqrt(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
bwg_day_levene_recip <- leveneTest(1/(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
if (!all(bwg_main[,4+i]>0)) {
increment = -min(bwg_main[,4+i], na.rm = TRUE) + 1
bwg_main_incre <- bwg_main[,4+i] + increment
bwg_day_levene_log_incre <- leveneTest(log(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
bwg_day_levene_sqrt_incre <- leveneTest(sqrt(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL), center = mean)
if (bwg_day_levene_log_incre[1,3] > 0.05) {
bwg_main_Tukey <- TukeyHSD(aov(log(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL)))
bwg_main_posthoc[2:group_no, i+1] = bwg_main_Tukey[[1]][1:(group_no-1),4]}
else if (bwg_day_levene_sqrt_incre[1,3] > 0.05) {
bwg_main_Tukey <- TukeyHSD(aov(sqrt(bwg_main_incre) ~ as.character(bwg_main$DOSE_LEVEL)))
bwg_main_posthoc[2:group_no, i+1] = bwg_main_Tukey[[1]][1:(group_no-1),4]}
}
else if (bwg_day_levene_recip[1,3] > 0.05) {
bwg_main_Tukey <- TukeyHSD(aov(1/(bwg_main[,4+i]) ~ as.character(bwg_main$DOSE_LEVEL)))
bwg_main_posthoc[2:group_no, i+1] = bwg_main_Tukey[[1]][1:(group_no-1),4]}
}
else if (bwg_main_posthoc[group_no+3, i+1] >= 0) {
bwg_main_Kruskal <- kruskalmc(bwg_main[,4+i], as.character(bwg_main$DOSE_LEVEL), prob = 0.05)
bwg_main_posthoc[2:group_no, i+1] = bwg_main_Kruskal[[3]][1:group_no-1,3]
}
}
# Sanity check
bwg_main_posthoc
# Cleaning up the post-hoc table
for (i in 2:group_no) {
for (j in 2:(count_aov_bwg+1)) {
if (bwg_main_posthoc[i,j] == 'FALSE') {bwg_main_posthoc[i,j] = '---'}
else if (bwg_main_posthoc[i,j] == 'TRUE') {bwg_main_posthoc[i,j] = 'p<0.05'}
else if (bwg_main_posthoc[i,j] == '---') {bwg_main_posthoc[i,j] = '---'}
else if (as.numeric(bwg_main_posthoc[i,j]) < 0.001) {bwg_main_posthoc[i,j] = 'p<0.001'}
else if (as.numeric(bwg_main_posthoc[i,j]) < 0.01) {bwg_main_posthoc[i,j] = 'p<0.01'}
else if (as.numeric(bwg_main_posthoc[i,j]) < 0.05) {bwg_main_posthoc[i,j] = 'p<0.05'}
else {bwg_main_posthoc[i,j] = '---'}
}
}
# Sanity check
bwg_main_posthoc
# Creating line charts for body weight data
# Starting by re-creating mean+sd data
bwg_main_desc <- describeBy(bwg_main, bwg_main$DOSE_LEVEL)
bwg_main_mean = list()
bwg_main_sd = list()
for (i in 1:group_no) {
bwg_main_mean[[i]] <- bwg_main_desc[[i]][5:(4 + length(bwg_dates)),3]
bwg_main_sd[[i]] <- round(bwg_main_desc[[i]][5:(4 + length(bwg_dates)),4], digits = 2)
}
bwg_main_chart <- data.frame(unlist(bwg_main_mean))
colnames(bwg_main_chart) = 'mean'
bwg_main_sd <- data.frame(unlist(bwg_main_sd))
colnames(bwg_main_sd) = 'sd'
bwg_main_chart$sd = unlist(bwg_main_sd)
# Note that without the 'unlist' function, 'bw_main_chart$sd' will
# become a datafrome with the datafrome of 'bw_main_chart', which
# will render plotting with errorbars below IMPOSSIBLE!!!
# I f*cking spent more than one hour figuring this out.
bwg_main_chart$day = bwg_dates
bwg_main_chart$dose = rep(group_names, each = count_aov_bwg)
# Sanity check
bwg_main_chart
# Creating faceted overview of body weight changes over all days for
# individual dose groups
library(ggplot2)
bwg_main_chart_group <- subset(bwg_main_chart, day != 'SUM')
bwg_main_chart_group$dose <- factor(bwg_main_chart_group$dose, levels = unique(bwg_main_chart_group$dose))
bwg_main_chart_facet <- ggplot(bwg_main_chart_group, aes(x = day, y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_grid(~ dose) + scale_y_continuous(name = 'Mean Body Weight Gain (g)') + theme(axis.title.x = element_blank())
# For sum data
bwg_main_chart_sum <- subset(bwg_main_chart, day == 'SUM')
bwg_main_chart_sum$dose <- factor(bwg_main_chart_sum$dose, levels = unique(bwg_main_chart_sum$dose))
bwg_main_chart_all <- ggplot(bwg_main_chart_sum, aes(x = dose, y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + scale_y_continuous(name = 'Body Weight Gain Throughout (g)') + theme(axis.title.x = element_blank())
# For a quick reference of designated colors in ggplot, check:
# http://sape.inf.usi.ch/quick-reference/ggplot2/colour
# Creating a line plot to compare group body weight data
pd <- position_dodge(0.1)
# Predefining the position dodge value so that
# the plot command below gets neater
bwg_main_chart_allinone <- ggplot(bwg_main_chart_group, aes(x = day, y = mean, group = dose)) +  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, size = 0.5, position = pd) + geom_line(stat = 'identity', size =0.5) + scale_y_continuous(name = "Mean Body Weight Gain (g)") + geom_point(aes(color = dose), size = 4, position = pd) + theme(axis.title.x = element_blank()) + guides(color = guide_legend(title = ""))
# Placing the errorbar parts before lines and points
# Importing clin-path data from excel files
cp <- read.xlsx(filename, sheetIndex = 4)
# Excluding null rows
cp_main <- subset(cp, cp[4] > 0)
# Obtaining valid group numbers
group_no_cp = length(unique(cp_main$DOSE_LEVEL))
# Obtaining information of numbers of indices to test
cp_number = ncol(cp_main) - 3
# Obtaining descriptive statistics of all indices
cp_main_desc <- describeBy(cp_main, cp_main$DOSE_LEVEL)
cp_main_desc_output = list()
for (i in 1:group_no_cp) {
cp_main_desc_i <- cp_main_desc[[i]][4:nrow(cp_main_desc[[i]]),3:4]
cp_main_desc_output[[i]] = cp_main_desc_i
}
cp_main_desc_output
# Obtaining group doses
group_names_cp = paste(as.character(unique(cp_main$DOSE_LEVEL)), 'mg/kg')
# Obtaining names of indices
cp_indices <- rownames(cp_main_desc_output[[1]])
# Renaming the component names of bw_main_desc_output
names(cp_main_desc_output) = group_names_cp
# Transforming the cp_main_desc_output into a neat table
for (i in 1:length(cp_main_desc_output)) {
cp_main_desc_output[[i]]$avg = paste(as.character(round(cp_main_desc_output[[i]]$mean, digits = 2)),
as.character(round(cp_main_desc_output[[i]]$sd, digits = 2)), sep=' ?? ') }
output_temp1_cp <- lapply(cp_main_desc_output, function(x) {x[,3]})
output_temp2_cp <- lapply(output_temp1_cp, function(x) {t(x)})
cp_main_desc_output <- ldply(output_temp2_cp)
colnames(cp_main_desc_output) <- c('DOSE', cp_indices)
print(cp_main_desc_output)
# Conducting Levene's Test between different dose groups
cp_main_aov <- cp_main_desc_output
cp_main_aov[(group_no_cp+1),1] = c('LEVENE')
cp_main_aov[(group_no_cp+2),1] = c('ANOVA (p=)')
cp_main_aov[(group_no_cp+3),1] = c('KRUSKAL-WALLIS (p=)')
cp_main_aov[(group_no_cp+4),1] = c('- SUMMARY -')
cp_main_aov <- data.frame(lapply(cp_main_aov, as.character), stringsAsFactors = FALSE)
# I'm not sure about what happened here. bw_main_aov was unintentionally
# changed into a dataframe with factor-type elements.
# Therefore, I had to manually change them back into characters.
for (i in 1:length(cp_indices)) {
cp_levene <- leveneTest(cp_main[,3+i] ~ as.character(cp_main$DOSE_LEVEL), center = mean)
if (is.na(cp_levene[1,3]) == TRUE) {
cp_main_aov[(group_no_cp+2),(i+1)] = c('-')
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('-')
}
else if (cp_levene[1,3] > 0.05) {
cp_main_aov[(group_no_cp+1),(i+1)] = c('PASS')
cp_aov <- aov(cp_main[,3+i] ~ as.character(DOSE_LEVEL), data = cp_main)
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
}
else {
if (0 %in% cp_main[,3+i]) {
cp_main_incre <- cp_main[,3+i] + 1
cp_levene_log_incre <- leveneTest(log(cp_main_incre) ~ as.character(cp_main$DOSE_LEVEL), center = mean)
cp_levene_sqrt_incre <- leveneTest(sqrt(cp_main_incre) ~ as.character(cp_main$DOSE_LEVEL), center = mean)
cp_levene_recip_incre <- leveneTest(1/(cp_main_incre) ~ as.character(cp_main$DOSE_LEVEL), center = mean)
if (cp_levene_log_incre[1,3] > 0.05) {
cp_aov <- aov(log(cp_main_incre) ~ as.character(cp_main$DOSE_LEVEL))
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('~')
}
else if (cp_levene_sqrt_incre[1,3] > 0.05) {
cp_aov <- aov(sqrt(cp_main_incre) ~ as.character(cp_main$DOSE_LEVEL))
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('~')
}
else if (cp_levene_recip_incre[1,3] > 0.05) {
cp_aov <- aov(1/cp_main_incre ~ as.character(cp_main$DOSE_LEVEL))
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('~')
}
else {cp_main_aov[(group_no_cp+1),(i+1)] = c('FAIL')
cp_main_aov[(group_no_cp+2),(i+1)] = c('-')
cp_kruskal <- kruskal.test(cp_main[,3+i] ~ cp_main$DOSE_LEVEL)
cp_main_aov[(group_no_cp+3),(i+1)] = round(cp_kruskal$p.value, digits = 4)
}
}
else if (!0 %in% cp_main[,3+i]) {
cp_levene_log <- leveneTest(log(cp_main[,3+i]) ~ as.character(cp_main$DOSE_LEVEL), center = mean)
cp_levene_sqrt <- leveneTest(sqrt(cp_main[,3+i]) ~ as.character(cp_main$DOSE_LEVEL), center = mean)
cp_levene_recip <- leveneTest(1/(cp_main[,3+i]) ~ as.character(cp_main$DOSE_LEVEL), center = mean)
if (cp_levene_log[1,3] > 0.05) {
cp_aov <- aov(log(cp_main[,3+i]) ~ as.character(DOSE_LEVEL), data = cp_main)
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('~')
}
else if (cp_levene_sqrt[1,3] > 0.05) {
cp_aov <- aov(sqrt(cp_main[,3+i]) ~ as.character(DOSE_LEVEL), data = cp_main)
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('~')
}
else if (cp_levene_recip[1,3] > 0.05) {
cp_aov <- aov(1/cp_main[,3+i] ~ as.character(DOSE_LEVEL), data = cp_main)
cp_main_aov[(group_no_cp+2),(i+1)] = round(summary(cp_aov)[[1]][1,5], digits = 4)
cp_main_aov[(group_no_cp+3),(i+1)] = c('-')
cp_main_aov[(group_no_cp+1),(i+1)] = c('~')
}
else {
cp_main_aov[(group_no_cp+1),(i+1)] = c('FAIL')
cp_main_aov[(group_no_cp+2),(i+1)] = c('-')
cp_kruskal <- kruskal.test(cp_main[,3+i] ~ cp_main$DOSE_LEVEL)
cp_main_aov[(group_no_cp+3),(i+1)] = round(cp_kruskal$p.value, digits = 4)
}
}
}
}
# Sanity check
cp_main_aov
# Create a summary row
for (i in c(1:length(cp_indices))) {
if (cp_main_aov[group_no_cp+2,i+1] == "-") {
# Adding a condition where the Leneve's test result is NULL
if (is.na(as.numeric(cp_main_aov[group_no_cp+3, i+1])) == TRUE) {
cp_main_aov[group_no_cp+4, i+1] = '---'
}
else if (as.numeric(cp_main_aov[group_no_cp+3,i+1]) - 0.001 < 0) {
cp_main_aov[group_no_cp+4, i+1] = '***'
}
else if (as.numeric(cp_main_aov[group_no_cp+3,i+1]) - 0.01 < 0) {
cp_main_aov[group_no_cp+4, i+1] = '**'
}
else if (as.numeric(cp_main_aov[group_no_cp+3,i+1]) - 0.05 < 0) {
cp_main_aov[group_no_cp+4, i+1] = '*'
}
else {
cp_main_aov[group_no_cp+4, i+1] = '---'
}
}
else if (as.numeric(cp_main_aov[group_no_cp+2,i+1]) - 0.001 < 0) {
cp_main_aov[group_no_cp+4, i+1] = '***'
}
else if (as.numeric(cp_main_aov[group_no_cp+2,i+1]) - 0.01 < 0) {
cp_main_aov[group_no_cp+4, i+1] = '**'
}
else if (as.numeric(cp_main_aov[group_no_cp+2,i+1]) - 0.05 < 0) {
cp_main_aov[group_no_cp+4, i+1] = '*'
}
else {
cp_main_aov[group_no_cp+4, i+1] = '---'
}
}
# Sanity check
cp_main_aov
# Post-hoc statistical analysis for ANOVA (including non-significant results)
cp_main_posthoc <- cp_main_aov
cp_main_posthoc[1,2:ncol(cp_main_posthoc)] = "---"
for (i in c(1:length(cp_indices))) {
# Adding a consideration to treat NULL data
if (paste(cp_main_posthoc[(group_no_cp+1):(group_no_cp+3), i+1], collapse='') == c('---')) {
cp_main_posthoc[2:group_no_cp,i+1] = rep('---', times = group_no_cp - 1)
}
else if (cp_main_posthoc[group_no_cp+2, i+1] >= 0 & cp_main_posthoc[group_no_cp+1, i+1] == 'PASS') {
cp_main_Tukey <- TukeyHSD(aov(cp_main[,3+i] ~ as.character(cp_main$DOSE_LEVEL)))
cp_main_posthoc[2:group_no_cp,i+1] = cp_main_Tukey[[1]][1:(group_no_cp-1),4]
}
else if (cp_main_posthoc[group_no_cp+2, i+1] >= 0 & cp_main_posthoc[group_no_cp+1, i+1] == '~') {
# Added quite a few lines here to tailor ANOVA on transformed data.
# Otherwise, there's no need for the transformation!!!
cp_main_log <- leveneTest(log(cp_main[,3+i]) ~ as.character(DOSE_LEVEL), data = cp_main)
cp_main_sqrt <- leveneTest(sqrt(cp_main[,3+i]) ~ as.character(DOSE_LEVEL), data = cp_main)
cp_main_recip <- leveneTest(1/(cp_main[,3+i]) ~ as.character(DOSE_LEVEL), data = cp_main)
# Testing recip in the first place, as it, in many cases
# is more powerful than the other two transformations
if (cp_main_recip[1,3] > 0.05) {
cp_main_Tukey <- TukeyHSD(aov(1/cp_main[,3+i] ~ as.character(cp_main$DOSE_LEVEL)))
cp_main_posthoc[2:group_no_cp,i+1] = cp_main_Tukey[[1]][1:(group_no_cp-1),4]
}
else if (cp_main_log[1,3] > 0.05) {
cp_main_Tukey <- TukeyHSD(aov(log(cp_main[,3+i]) ~ as.character(cp_main$DOSE_LEVEL)))
cp_main_posthoc[2:group_no_cp,i+1] = cp_main_Tukey[[1]][1:(group_no_cp-1),4]
}
else if (cp_main_sqrt[1,3] > 0.05) {
cp_main_Tukey <- TukeyHSD(aov(sqrt(cp_main[,3+i]) ~ as.character(cp_main$DOSE_LEVEL)))
cp_main_posthoc[2:group_no_cp,i+1] = cp_main_Tukey[[1]][1:(group_no_cp-1),4]
}
}
else if (cp_main_posthoc[group_no_cp+3, i+1] >= 0) {
cp_Kruskal <-  kruskalmc(cp_main[,3+i] ~ as.character(cp_main$DOSE_LEVEL), prob = 0.05)
cp_main_posthoc[2:group_no_cp, i+1] = cp_Kruskal[[3]][1:(group_no_cp-1),3]
}
}
# Sanity check
cp_main_posthoc
# Cleaning up the post-hoc table
for (i in 2:group_no_cp) {
for (j in 2:(length(cp_indices)+1)) {
# Adding a condition for non-numeric values here.
if (cp_main_posthoc[i,j] == 'FALSE') {cp_main_posthoc[i,j] = '---'}
else if (cp_main_posthoc[i,j] == 'TRUE') {cp_main_posthoc[i,j] = 'p<0.05'}
else if (cp_main_posthoc[i,j] == '---') {cp_main_posthoc[i,j] = '---'}
# The above line has to be inserted where it is now. If it is placed in the end,
# this section simply does not work.
# For such cases, always place logical judgment lines ahead.
else if (as.numeric(cp_main_posthoc[i,j]) < 0.001) {cp_main_posthoc[i,j] = 'p<0.001'}
else if (as.numeric(cp_main_posthoc[i,j]) < 0.01) {cp_main_posthoc[i,j] = 'p<0.01'}
else if (as.numeric(cp_main_posthoc[i,j]) < 0.05) {cp_main_posthoc[i,j] = 'p<0.05'}
else {cp_main_posthoc[i,j] = '---'}
}
}
# Sanity check
cp_main_posthoc
# Creating a clean table with only significant results
cp_main_posthoc_clean <- data.frame(cp_main_posthoc[,1])
colnames(cp_main_posthoc_clean) = 'DOSE'
j = 1
for (i in 2:(length(cp_indices)+1)) {
if (paste(cp_main_posthoc[1:group_no_cp,i], collapse='') == paste(rep('---', times = group_no_cp), collapse='')) {}
# Tried an array of conditions here and this seems simple and working ...
# And using a fixed length of '---...---' cannot meet the needs of studyes
# where there are different number of groups
else {
cp_main_posthoc_clean[,j+1] = cp_main_posthoc[,i]
colnames(cp_main_posthoc_clean)[j+1] = colnames(cp_main_posthoc)[i]
j = j + 1
}
}
# Sanity check
cp_main_posthoc_clean
# Obtaining the list of indices to be plotted
cp_indices_comp <- colnames(cp_main_posthoc_clean)[-1]
# Creating cp_main_comp which contains data
# that need to be plotted
cp_main_comp <- cp_main[,1:3]
for (i in 1:length(cp_indices)) {
if (colnames(cp_main)[i+3] %in% cp_indices_comp) {
cp_main_comp <- cbind(cp_main_comp, cp_main[,i+3])
}
else {}
}
colnames(cp_main_comp)[4:ncol(cp_main_comp)] = cp_indices_comp
# Sanity check
cp_main_comp
# Re-creating mean+sd data
cp_main_comp_desc <- describeBy(cp_main_comp, cp_main_comp$DOSE_LEVEL)
cp_main_comp_mean = list()
cp_main_comp_sd = list()
for (i in 1:group_no_cp) {
cp_main_comp_mean[[i]] <- cp_main_comp_desc[[i]][4:(length(cp_indices_comp)+3),3]
cp_main_comp_sd[[i]] <- round(cp_main_comp_desc[[i]][4:(length(cp_indices_comp)+3),4], digits = 2)
}
cp_main_comp_chart <- data.frame(unlist(cp_main_comp_mean))
colnames(cp_main_comp_chart) = 'mean'
cp_main_comp_sd <- data.frame(unlist(cp_main_comp_sd))
colnames(cp_main_comp_sd) = 'sd'
cp_main_comp_chart$sd = unlist(cp_main_comp_sd)
# Obtaining dose numbers
dose_levels_cp <- unique(cp_main$DOSE_LEVEL)
cp_main_comp_chart$indices = cp_indices_comp
cp_main_comp_chart$dose = rep(dose_levels_cp, each = length(cp_indices_comp))
# Sanity check
cp_main_comp_chart
cp_main_comp_chart
factor(cp_main_comp_chart)
factor(cp_main_comp_chart$dose)
cp_main_comp_facet <- ggplot(cp_main_comp_chart, aes(x = as.character(dose), y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_wrap(~ indices, ncol = 3, scales = 'free') + ylab('') + xlab('Dose (mg/kg/day)')
cp_main_comp_facet
?factor
cp_main_comp_chart$dose <- factor(cp_main_comp_chart$dose, levels = unique(cp_main_comp_chart$dose), ordered = TRUE)
cp_main_comp_facet <- ggplot(cp_main_comp_chart, aes(x = as.character(dose), y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_wrap(~ indices, ncol = 3, scales = 'free') + ylab('') + xlab('Dose (mg/kg/day)')
cp_main_comp_facet
cp_main_comp_chart$dose <- factor(cp_main_comp_chart$dose, levels = unique(cp_main_comp_chart$dose))
cp_main_comp_chart$dose <- factor(as.character(cp_main_comp_chart$dose), levels = unique(cp_main_comp_chart$dose))
cp_main_comp_facet <- ggplot(cp_main_comp_chart, aes(x = as.character(dose), y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_wrap(~ indices, ncol = 3, scales = 'free') + ylab('') + xlab('Dose (mg/kg/day)')
cp_main_comp_facet
cp_main_comp_chart$dose <- factor(as.character(cp_main_comp_chart$dose), levels = unique(as.character(cp_main_comp_chart$dose)))
cp_main_comp_facet <- ggplot(cp_main_comp_chart, aes(x = as.character(dose), y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_wrap(~ indices, ncol = 3, scales = 'free') + ylab('') + xlab('Dose (mg/kg/day)')
cp_main_comp_facet
cp_main_comp_chart$dose <- factor(cp_main_comp_chart$dose, levels = unique(cp_main_comp_chart$dose))
cp_main_comp_facet <- ggplot(cp_main_comp_chart, aes(x = as.numeric(dose), y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_wrap(~ indices, ncol = 3, scales = 'free') + ylab('') + xlab('Dose (mg/kg/day)')
cp_main_comp_facet
cp_main_comp_facet <- ggplot(cp_main_comp_chart, aes(x = as.factor(dose), y = mean)) + geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.5, size = 0.5) + geom_bar(stat = 'identity', width = 0.75, fill = 'burlywood', color = 'black') + facet_wrap(~ indices, ncol = 3, scales = 'free') + ylab('') + xlab('Dose (mg/kg/day)')
cp_main_comp_facet
